//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PseudoCodeCompiler.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("PseudoCodeCompiler.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Main
        ///	numberArray(1) = 123
        ///	print numberArray(1)
        ///	numberArray(2) = numberArray(1) + 2
        ///	print numberArray(2)
        ///	
        ///	if numberArray(1) &gt; 50 then
        ///		print &quot;Should see this&quot;
        ///	else
        ///		print &quot;Should not see this&quot;
        ///	endif
        ///	
        ///	Length = 9
        ///	DO index = 1 TO Length
        ///		doubles(index) = index * 2
        ///		squares(index) = index * index
        ///	ENDDO
        ///	
        ///	print &quot;Doubles Table&quot;
        ///	print &quot;X  X+X&quot;
        ///	DO index = 1 TO Length
        ///		print index, doubles(index)
        ///	ENDDO
        ///	
        ///	print &quot;Sqaures Table&quot;
        ///	print &quot;X  X*X&quot;
        ///	DO index = 1 TO Length
        ///		p [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Arrays {
            get {
                return ResourceManager.GetString("Arrays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Decisions - Case Statement
        ///#
        ///# This simple program shows how to make slightly more complex decisions in your code that involve
        ///# more than one path based on a single variable. 
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	#Set a variable to a value
        ///	myNumber = 3
        ///	
        ///	# a simple case example selecting text output based on the value of myNumber
        ///	case of myNumber
        ///		0: print &quot;It&apos;s Zero&quot;
        ///		1: print &quot;It&apos;s One&quot;
        ///		2: print &quot;It&apos;s Two&quot;
        ///		3: print &quot;It&apos;s Three&quot;
        ///		4: print &quot;It&apos;s Four&quot;
        ///		5: print &quot;It&apos;s Five&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Case {
            get {
                return ResourceManager.GetString("Case", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Combining Logic
        ///#
        ///# This example demonstrates the syntax for combining logical statements using the Boolean
        ///# logic operations of AND, OR and NOT. 
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	# Set the number variable to an arbitrary value
        ///	# Change these to anything to test how the code works
        ///	rating = &quot;R&quot;
        ///	customerAge = 21
        ///	
        ///	# statements can be combined on one line
        ///	if rating == &quot;R&quot; AND customerAge &lt; 18 then
        ///		print &quot;Too Young for R Rated Movies&quot;
        ///		
        ///	# or statements can span multiple lines [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CombiningLogic {
            get {
                return ResourceManager.GetString("CombiningLogic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Looping - Counting Loops
        ///#
        ///# This is a simple example of counting loops.
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	
        ///	# this will count from 0 to 10
        ///	do number = 0 to 10
        ///		print number
        ///	enddo
        ///	
        ///End.
        /// </summary>
        internal static string CountingLoops {
            get {
                return ResourceManager.GetString("CountingLoops", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Data Files
        ///#
        ///# This is an example of working with data files.
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	
        ///	read studentID, studentName, studentGPA
        ///	while not eof
        ///
        ///		# determine the letter representation of the GPA
        ///		if studentGPA &gt;= 4 then
        ///			letterGPA = &apos;A&apos;
        ///		elseif studentGPA &gt;= 3 then
        ///			letterGPA = &apos;B&apos;
        ///		elseif studentGPA &gt;= 2 then
        ///			letterGPA = &apos;C&apos;
        ///		elseif studentGPA &gt;= 1 then
        ///			letterGPA = &apos;D&apos;
        ///		else
        ///			letterGPA = &apos;F&apos;
        ///		endif
        ///		
        ///		print studentID, studentName, studentGPA, le [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DataFileExample {
            get {
                return ResourceManager.GetString("DataFileExample", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Decisions - If / Then / Else 
        ///#
        ///# This simple program shows how to make simple logical decisions in your code based on
        ///# value comparisons of two variables. In any of these structures variables may be replaced
        ///# with literals if required.
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	# Set the number variable to an arbitrary value
        ///	# Change these to anything to test how the code works
        ///	number = 5
        ///	other = 5
        ///	
        ///	# compare equality
        ///	if number == 5 then
        ///		print number, &quot;is equal to&quot;, other
        ///	else
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Decisions {
            get {
                return ResourceManager.GetString("Decisions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Hello World
        ///#
        ///# The is every coders first program. This program simply outputs Hello World to the 
        ///# console a few times.
        ///# As with all the examples a variety of ways are shown to do the same operations.
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	print &quot;Hello World!&quot;
        ///	write &quot;Hello World!&quot;
        ///	output &quot;Hello World!&quot;
        ///	put &quot;Hello World!&quot;
        ///	display &quot;Hello World!&quot;
        ///End.
        /// </summary>
        internal static string HelloWorld {
            get {
                return ResourceManager.GetString("HelloWorld", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Looping - While Loops
        ///#
        ///# This is a simple example of while loops, or pre-condiditon loops.
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	
        ///	number = 0
        ///	
        ///	# this will count from 1 to 10
        ///	while number &lt; 10
        ///		number = number + 1
        ///		print number
        ///	endwhile
        ///	
        ///End.
        /// </summary>
        internal static string Looping {
            get {
                return ResourceManager.GetString("Looping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Nested Decisions
        ///#
        ///# This example demonstrates the syntax for nesting decision statements to produce more complex
        ///# logical statements
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	# Set the number variable to an arbitrary value
        ///	# Change these to anything to test how the code works
        ///	rating = &quot;R&quot;
        ///	customerAge = 21
        ///	
        ///	if rating == &quot;R&quot; THEN
        ///		if customerAge &lt; 18 then
        ///			print &quot;Too Young for R Rated Movies&quot;
        ///		else 
        ///			print &quot;Sell Approved&quot;
        ///		endif
        ///	else
        ///		if rating == &quot;PG-13&quot; then
        ///			if custom [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NestedDecisions {
            get {
                return ResourceManager.GetString("NestedDecisions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap openfolderHS {
            get {
                object obj = ResourceManager.GetObject("openfolderHS", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Looping - Repeat Loops
        ///#
        ///# This is a simple example of while loops, or post-condiditon loops.
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	
        ///	number = 0
        ///	
        ///	# this will count from 1 to 10
        ///	repeat
        ///		number = number + 1
        ///		print number
        ///	until number &lt; 10
        ///
        ///End.
        /// </summary>
        internal static string RepeatLoops {
            get {
                return ResourceManager.GetString("RepeatLoops", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to         
        ///        ***** Revision History *****
        ///-------------------------------------------------
        ///1.1 Build 7				04/06/2011
        ///-------------------------------------------------
        /// - Fixed array assignment issue (fixed &quot;broken&quot; example code)
        /// - Updated about box
        ///
        ///-------------------------------------------------
        ///1.1 Build 6				03/20/2011
        ///-------------------------------------------------
        /// - Fixed Hotkey lockdown issue
        /// - Fixed backspacing tabs issue. Only requires one kestroke to delete
        /// - Added line nu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string RevisionHistory {
            get {
                return ResourceManager.GetString("RevisionHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Main
        ///	#This is a comment
        ///	prompt for myNumber
        ///	if myNumber == 10 then
        ///		print &quot;Its 10&quot;
        ///	endif
        ///End.
        /// </summary>
        internal static string SampleCode {
            get {
                return ResourceManager.GetString("SampleCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap SaveAllHS {
            get {
                object obj = ResourceManager.GetObject("SaveAllHS", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap saveHS {
            get {
                object obj = ResourceManager.GetObject("saveHS", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///	void	sayHelloMethod ( string  name, num someNum)
        ///		print &quot;Hello there, &quot;
        ///		print name, someNum
        ///		someNum = someNum + 1
        ///		if someNum &lt; 5 then
        ///			sayHelloMethod(name, someNum)
        ///		endif
        ///		print &quot;Hello there, &quot;
        ///		print name, someNum
        ///	return
        ///	
        ///Start
        ///	num myNumber
        ///	num myNumber2 = 123
        ///	string myName
        ///	
        ///	myName = &quot;Chris Henderson&quot;
        ///	print myName
        ///	
        ///	sayHelloMethod(myName, 1)
        ///	
        ///	print &quot;Hello World!&quot;
        ///	
        ///	myNumber = 1
        ///	print myNumber
        ///	
        ///	myNumber2 = 321
        ///	print myNumber2
        ///	
        ///	myNumber = (myNumb [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SimpleCode {
            get {
                return ResourceManager.GetString("SimpleCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Simple Input Example
        ///#
        ///# This program shows the basics of working with active user input. 
        ///# As with all the examples a variety of ways are shown to do the same operations.
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	prompt for userName
        ///	get userName
        ///	
        ///	print &quot;Hello &quot;, userName, &quot;!&quot;
        ///	
        ///	prompt for userAge
        ///	multiply userAge by 12
        ///	
        ///	print &quot;You are &quot;, userAge, &quot; months old.&quot;
        ///End
        ///	
        ///	
        ///	.
        /// </summary>
        internal static string SimpleInput {
            get {
                return ResourceManager.GetString("SimpleInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Simple Math Example
        ///#
        ///# This program shows the basics of performing mathmatic operations 
        ///# and displaying results to the user. As with all the examples a variety
        ///# of ways are shown to do the same operations.
        ///#
        ///
        ///# The Main Program Starts Here
        ///Main
        ///	set number to 1
        ///	total = 10
        ///	print &quot;Starting Values: &quot;, number, total
        ///	
        ///	add number to total
        ///	number = number + 2
        ///	print &quot;After Adding Values: &quot;, number, total
        ///	
        ///	subtract number from total
        ///	number = number - 1
        ///	print &quot;After Subtracting Valu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SimpleMath {
            get {
                return ResourceManager.GetString("SimpleMath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Main
        ///     # Create a Multiplication Table from 1 to 10
        ///     Length = 10
        ///     
        ///     # outer loop used for each row
        ///     do row = 1 to Length
        ///          #inner loop used for each column
        ///          do column = 1 to Length
        ///               #calculate and save the product
        ///               table(row, column) = row * column
        ///          enddo
        ///     enddo
        ///     
        ///     # use the same structure to print the table
        ///     do row = 1 to Length
        ///          do column = 1 to Length
        ///               print row, &quot; * &quot;, column,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TwoDimArrays {
            get {
                return ResourceManager.GetString("TwoDimArrays", resourceCulture);
            }
        }
    }
}
